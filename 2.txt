服务器端
import numpy as np
import tensorflow as tf
import cv2
from flask import Flask, jsonify, request

model = tf.keras.models.load_model('my_mode.h5')

app = Flask(__name__)

@app.route('/detect', methods=['POST'])
def detect():
    if request.method == 'POST':
        file = request.files['image']
        if not file:
            return jsonify({'error': 'Upload failed'})
            
        data = file.read()
        npimg = np.frombuffer(data, np.uint8)
        image = cv2.imdecode(npimg, cv2.IMREAD_COLOR)
        image = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)
        image = cv2.resize(image,(224,224))
        image = image.astype(np.float32) / 255.0
        predictions = model.predict(np.array([image]))
        class_names=['t', 'z']
        route = {'prediction': class_names[np.argmax(predictions)]}
        return jsonify(route)

if __name__ == '__main__':
    app.run()
客户端：
java：package com.example.myapplication;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.ProgressDialog;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Toast;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.UUID;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "MainActivity"; // 用于调试的TAG标志

    // 请求相机和相册的常量值
    private static final int REQUEST_CODE_CAMERA = 1;
    private static final int REQUEST_CODE_ALBUM = 2;

    private EditText mUrlET; // 用于输入上传图片的URL的EditText
    private ImageView mImageView; // 用于显示选择的图片的ImageView
    private Bitmap mBitmap; // 选择的图片
    private ProgressDialog mProgressDialog; // 用于显示上传进度的ProgressDialog

    private String boundary = UUID.randomUUID().toString(); // 用于multipart/form-data类型的POST请求的分隔符

    @SuppressLint("MissingInflateParams")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main); // 加载布局文件

        mUrlET = findViewById(R.id.url_et); // 初始化EditText
        mImageView = findViewById(R.id.image_view); // 初始化ImageView
        mProgressDialog = new ProgressDialog(this); // 初始化ProgressDialog

        findViewById(R.id.capture_btn).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // 检查相机权限
                if (checkSelfPermission(Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
                    requestPermissions(new String[]{Manifest.permission.CAMERA}, REQUEST_CODE_CAMERA);
                } else {
                    //打开相机
                    dispatchTakePictureIntent();
                }
            }
        });


        findViewById(R.id.choose_btn).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // 打开相册，选择图片
                Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                startActivityForResult(intent, REQUEST_CODE_ALBUM);
            }
        });

        findViewById(R.id.upload_btn).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // 检查网络链接
                if (!isNetworkConnected()) {
                    Toast.makeText(MainActivity.this, "请检查网络连接", Toast.LENGTH_SHORT).show();
                    return;
                }

                // 检查是否选择图片
                if (mBitmap == null) {
                    Toast.makeText(MainActivity.this, "请选择图片", Toast.LENGTH_SHORT).show();
                    return;
                }

                String url = mUrlET.getText().toString().trim(); // 获取用户输入的URL地址
                if (url.isEmpty()) { // 判断URL是否为空
                    Toast.makeText(MainActivity.this, "请输入有效的URL", Toast.LENGTH_SHORT).show();
                    return;
                }

                // 创建并执行上传图片的异步任务
                new UploadImageTask(url, mBitmap).execute();
            }
        });
    }

    // 处理申请权限的结果
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == REQUEST_CODE_CAMERA && grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
            dispatchTakePictureIntent();
        }
    }

    // 打开相机
    private void dispatchTakePictureIntent() {
        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
            startActivityForResult(takePictureIntent, REQUEST_CODE_CAMERA);
        }
    }

    // 处理打开相册或拍照后的结果
    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK) {
            switch (requestCode) {
                case REQUEST_CODE_CAMERA:
                    Bundle extras = data.getExtras();
                    if (extras != null) {
                        mBitmap = (Bitmap) extras.get("data"); // 获取相机拍摄的图片数据
                        mImageView.setImageBitmap(mBitmap); // 显示选择的图片
                    }
                    break;
                case REQUEST_CODE_ALBUM:
                    if (data != null && data.getData() != null) {
                        Uri uri = data.getData(); // 获取选择的图片的URI
                        try {
                            mBitmap = MediaStore.Images.Media.getBitmap(getContentResolver(), uri); // 获取选择的图片数据
                            mImageView.setImageBitmap(mBitmap); // 显示选择的图片
                        } catch (IOException e) {
                            Log.e(TAG, "onActivityResult: ", e);
                        }
                    }
                    break;
            }
        }
    }

    // 检查网络链接
    private boolean isNetworkConnected() {
        ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(CONNECTIVITY_SERVICE);
        NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();
        return networkInfo != null && networkInfo.isConnected();
    }

    // 上传图片的异步任务
    private class UploadImageTask extends AsyncTask<Void, Void, String> {
        private String mUrl;
        private Bitmap mBitmap;

        public UploadImageTask(String url, Bitmap bitmap) {
            mUrl = url;
            mBitmap = bitmap;
        }

        // 在执行异步任务前显示ProgressDialog
        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            mProgressDialog.setMessage("上传中");
            mProgressDialog.setCancelable(false);
            mProgressDialog.show();
        }

        @Override
        protected String doInBackground(Void... voids) {
            try {
                URL apiUrl = new URL(mUrl);
                HttpURLConnection connection = (HttpURLConnection) apiUrl.openConnection();

                // 设置请求头
                connection.setRequestMethod("POST");
                connection.setDoInput(true);
                connection.setDoOutput(true);
                connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);

                // 设置请求体
                DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream());
                outputStream.writeBytes("--" + boundary + "\r\n");
                outputStream.writeBytes("Content-Disposition: form-data; name=\"image\"; filename=\"image.png\"\r\n");
                outputStream.writeBytes("Content-Type: image/png\r\n\r\n");
                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                mBitmap.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream);
                byte[] byteArray = byteArrayOutputStream.toByteArray();
                outputStream.write(byteArray, 0, byteArray.length);
                outputStream.writeBytes("\r\n--" + boundary + "--\r\n");

                // 发送请求
                connection.connect();
                if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
                    // 处理响应
                    InputStream inputStream = connection.getInputStream();
                    byte[] buffer = new byte[1024];
                    ByteArrayOutputStream resultStream = new ByteArrayOutputStream();
                    int length;
                    while ((length = inputStream.read(buffer)) != -1) {
                        resultStream.write(buffer, 0, length);
                    }
                    String result = resultStream.toString();
                    return result;
                } else {
                    // 处理错误
                    Log.e(TAG, "doInBackground: error code = " + connection.getResponseCode());
                }

                if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
                    // 处理响应
                    InputStream inputStream = connection.getInputStream();
                    byte[] buffer = new byte[1024];
                    ByteArrayOutputStream resultStream = new ByteArrayOutputStream();
                    int length;
                    while ((length = inputStream.read(buffer)) != -1) {
                        resultStream.write(buffer, 0, length);
                    }

                    return resultStream.toString();
                } else {
                    // 处理错误
                    Log.e(TAG, "doInBackground: error code = " + connection.getResponseCode());
                }
            } catch (Exception e) {
                Log.e(TAG, "doInBackground: ", e);
            }
            return null;
        }

        // 在异步任务完成后隐藏ProgressDialog，并根据上传结果更新UI
        @Override
        protected void onPostExecute(String result) {
            super.onPostExecute(result);
            mProgressDialog.dismiss();
            if (result != null) {
                // 更新 UI，显示服务器返回的结果
                Toast.makeText(MainActivity.this, result, Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(MainActivity.this, "上传失败，请检查网络连接", Toast.LENGTH_SHORT).show();
            }
        }
    }
}
xml：
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity">

    <ImageView
        android:id="@+id/image_view"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:scaleType="centerCrop"
        android:src="@drawable/ic_launcher_background"/>

    <EditText
        android:id="@+id/url_et"
        android:layout_width="match_parent"
        android:layout_height="50dp"
        android:hint="请输入服务器URL"/>

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal">
        <Button
            android:id="@+id/capture_btn"
            android:layout_width="0dp"
            android:layout_height="match_parent"
            android:layout_weight="1"
            android:text="拍照"/>
        <Button
            android:id="@+id/choose_btn"
            android:layout_width="0dp"
            android:layout_height="match_parent"
            android:layout_weight="1"
            android:text="选择"/>
        <Button
            android:id="@+id/upload_btn"
            android:layout_width="0dp"
            android:layout_height="match_parent"
            android:layout_weight="1"
            android:text="上传"/>
    </LinearLayout>
</LinearLayout>